{"version":3,"sources":["FeedbackModal.js","Utils/NewCropImage.js","App.js","serviceWorker.js","index.js"],"names":["FeedbackModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","data","summary","state","fields","description","coverPhoto","axios","post","then","res","setState","prevState","showFeedbackModal","onImageLoaded","image","imageRef","handleChange","field","e","target","value","imagePreviewCanvasRef","React","createRef","showReportModal","crop","croppedImage","screenShotImage","toggle","bind","assertThisInitialized","handleOnCropChange","handleOnCropComplete","takeScreenShot","handleCropImage","_this2","name","document","getElementById","getAttribute","window","$","on","pixelCrop","_this3","height","width","fileName","canvas","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","getCroppedImg","console","log","reader","FileReader","self","readAsDataURL","onloadend","result","URL","createObjectURL","_this4","html2canvas","querySelector","toDataURL","replace","_React$createElement","_this5","react_default","a","Modal","id","isOpen","fade","style","display","opacity","ModalHeader","ModalBody","Form","FormGroup","Input","type","placeholder","onChange","marginBottom","check","onClick","toInclude","defineProperty","left","marginLeft","className","ReactCrop_default","src","onComplete","ModalFooter","Button","color","Component","App","src_FeedbackModal","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.963f2304.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input } from 'reactstrap';\n\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { getCroppedImg } from './Utils/NewCropImage';\nimport html2canvas from 'html2canvas';\nimport axios from 'axios';\n\nclass FeedbackModal extends Component {\n    constructor(props) {\n        super(props);\n        this.imagePreviewCanvasRef = React.createRef()\n        this.state = {\n            showReportModal: false,\n            crop: {\n            },\n            croppedImage: '',\n            showFeedbackModal: false,\n            fields: {\n                summary: '',\n                description: '',\n                coverPhoto: ''\n            }\n        };\n        this.screenShotImage = '';\n        this.imageRef = '';\n        this.toggle = this.toggle.bind(this);\n        this.handleOnCropChange = this.handleOnCropChange.bind(this);\n        this.handleOnCropComplete = this.handleOnCropComplete.bind(this);\n        this.takeScreenShot = this.takeScreenShot.bind(this);\n        this.handleCropImage = this.handleCropImage.bind(this);\n\n    }\n\n    componentDidMount() {\n        var name = document.getElementById(\"feedbackId\").getAttribute(\"data-trigger\");\n        window.$(document).on('click', \".\" + name, (e) => {\n            this.takeScreenShot();\n        });\n    }\n\n    toggle() {\n        this.setState(prevState => ({\n            showFeedbackModal: !prevState.showFeedbackModal\n        }));\n    }\n\n    handleSubmit = () => {\n        const data = {\n            summary: this.state.fields['summary'],\n            description: this.state.fields['description'],\n            coverPhoto: this.state.fields['coverPhoto'],\n        }\n\n        axios.post(`http://192.168.102.120/qa.api.itelbpo/api/issues`, data)\n            .then(res => {\n                const fields = res.data;\n                this.setState({ fields });\n            })\n\n        this.setState(prevState => ({\n            showFeedbackModal: !prevState.showFeedbackModal\n        }));\n    }\n\n    handleOnCropChange(crop) {\n        this.setState({\n            crop: crop\n        })\n    }\n\n    onImageLoaded = (image) => {\n        this.imageRef = image;\n    }\n\n    handleOnCropComplete(crop, pixelCrop) {\n        if (!crop || !crop.height || !crop.width) return\n        // const canvasRef = this.imagePreviewCanvasRef.current\n        getCroppedImg(this.imageRef, crop, pixelCrop).then((croppedImage) => {\n            console.log(croppedImage);\n            var reader = new FileReader();\n            var self = this;\n            reader.readAsDataURL(croppedImage);\n            reader.onloadend = function () {\n                self.handleCropImage(reader.result);\n            }\n            this.setState({ croppedImage: URL.createObjectURL(croppedImage) })\n        })\n\n    }\n\n    handleCropImage(result) {\n        this.state.fields.coverPhoto = result;\n        console.log(\"new image\", this.state.fields.coverPhoto);\n    }\n\n    handleChange = (field, e) => {\n        let fields = this.state.fields;\n        fields[field] = e.target.value;\n        this.setState({ fields });\n    }\n\n    takeScreenShot() {\n        html2canvas(document.querySelector('body')).then((canvas) => {\n            this.screenShotImage = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n            this.setState({ showFeedbackModal: true })\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal id=\"myModal\" isOpen={this.state.showFeedbackModal} toggle={this.toggle} fade={false} style={{ width: \"100%\", display: \"block\", opacity: 1 }}>\n                    <ModalHeader toggle={this.toggle}>Send Feedback</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <Input type=\"text\" name=\"text\" id=\"Text\"\n                                    placeholder=\"Please write summary\"\n                                    onChange={this.handleChange.bind(this, \"summary\")}\n                                    value={this.state.fields[\"summary\"]}\n                                    style={{ marginBottom: \"18px\" }}\n                                />\n                                <Input type=\"textarea\" name=\"text\" id=\"exampleText\"\n                                    placeholder=\"Describe your issue or share your ideas\"\n                                    onChange={this.handleChange.bind(this, \"description\")}\n                                    value={this.state.fields[\"description\"]}\n                                />\n                            </FormGroup>\n                            <FormGroup check>\n                                <Input onClick={this.state.toInclude} onClick={() => this.setState({ toInclude: !this.state.toInclude })} type=\"checkbox\" style={{ left: \"0px\" }} defaultChecked/>{'    '}\n                                <span style={{ marginLeft: \"10px\" }}>Include Screenshot</span>\n                            </FormGroup>\n                            <hr />\n                        </Form>\n                        <div className='image'>\n                            <ReactCrop\n                                src={this.screenShotImage}\n                                crop={this.state.crop}\n                                onChange={this.handleOnCropChange}\n                                onImageLoaded={this.onImageLoaded}\n                                onComplete={this.handleOnCropComplete}\n                                className=\"Image-demo\"\n                            />\n                            <br />\n                            <p>Crop image</p>\n                            <img src={this.state.croppedImage} />\n                        </div>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"primary\" onClick={this.toggle}>Cancel</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.handleSubmit}>Send</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default FeedbackModal;\n\n","/**\n * @param {File} image - Image File Object\n * @param {Object} crop - crop Object\n * @param {String} fileName - Name of the returned file in Promise\n */\nexport const getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n  \n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height,\n    );\n  \n    // As Base64 string\n    // const base64Image = canvas.toDataURL('image/jpeg');\n  \n    // As a blob\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        blob.name = fileName;\n        resolve(blob);\n      }, 'image/jpeg');\n    });\n  }\n  \n//  async test() {\n//     const croppedImg = await getCroppedImg(image, crop, fileName);\n//   }\n","import React from 'react';\nimport './App.css';\nimport FeedbackModal from './FeedbackModal';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FeedbackModal  />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconsole.log(\"feedbak react app\");\nReactDOM.render(<App />, document.getElementById('feedbackId'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}